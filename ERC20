// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7; 

interface IERC20{
    function totalSupply() external view returns(uint);
    function balanceOf(address account) external view returns (uint);
    function transfer (address recipient, uint amount) external returns(bool);
    function approve(address spender, uint amount) external returns(bool);//aprove sender to send some of his token 
    function transferFrom(address spender, address receipien, uint amount) external returns(bool);
    event Transfer(address indexed from,address indexed to, uint amount);
    event Approval(address indexed owner, address indexed spender, uint amount);


}
contract ERC20 is IERC20{
    uint public override totalSupply;
    mapping(address => uint) public override balanceOf;
    mapping(address => mapping(address => uint)) public allowance;
    string public name = "test";
    string public symbol = "TEST";
    uint8 public decimal = 18; 

    function transfer (address recipient, uint amount) external override returns(bool){
        balanceOf[msg.sender] -= amount;
        balanceOf[recipient] += amount; 
        emit Transfer(msg.sender, recipient, amount);
        return true; 
    }
    function approve(address spender, uint amount) external override returns (bool){
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;

    }
    function transferFrom(address spender, address recipient, uint amount) external override returns(bool){
        allowance[spender][msg.sender] -= amount; 
        balanceOf[spender] -= amount;
        balanceOf[recipient] += amount;
        emit Transfer(spender, recipient, amount);
        return true;
    }
    function mint(uint amount) external{
        balanceOf[msg.sender] += amount;
        totalSupply +=amount;
        emit Transfer(address(0), msg.sender, amount);
    }
    function burn(uint amount ) external{
        balanceOf[msg.sender] -= amount;
        totalSupply +=amount;
        emit Transfer(msg.sender,address(0), amount);

    }

}
